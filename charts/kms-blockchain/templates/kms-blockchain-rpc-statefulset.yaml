{{- if .Values.kmsBlockchainRpc.enabled -}}
{{ $kmsBlockchainRpcName := include "kmsBlockchainRpcName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kms-blockchain-rpc
    app.kubernetes.io/name: {{ $kmsBlockchainRpcName }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/kms-blockchain-rpc-config.yaml") . | sha256sum }}
  name: {{ $kmsBlockchainRpcName }}
spec:
  replicas: {{ .Values.kmsBlockchainRpc.replicas }}
  selector:
    matchLabels:
      app: kms-blockchain-rpc
  serviceName: {{ $kmsBlockchainRpcName }}
  template:
    metadata:
      labels:
        app: kms-blockchain-rpc
        app.kubernetes.io/name: {{ $kmsBlockchainRpcName }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/kms-blockchain-rpc-config.yaml") . | sha256sum }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      subdomain: {{ $kmsBlockchainRpcName }}
      containers:
        - name: kms-blockchain-node-sidecar
          image: ghcr.io/zama-ai/kms-blockchain-node-sidecar:0.1.0
          env:
            - name: NODE_RPC_URL
              value: "http://localhost:{{ .Values.kmsBlockchainValidator.healthcheck.port }}"
          livenessProbe:
            httpGet:
              path: "/health/liveness"
              port: 8000
            periodSeconds: 10
            timeoutSeconds: 5
        - name: kms-blockchain-rpc
          image: {{ .Values.kmsBlockchainRpc.image.name }}:{{ .Values.kmsBlockchainRpc.image.tag }}
          command: ["sh", "-c"]
          args:
            - "/opt/start-rpc.sh"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.kmsBlockchainRpc.bootnodeSeeds }}
            - name: BOOTNODE_SEEDS
              value: {{ .Values.kmsBlockchainRpc.bootnodeSeeds | quote }}
            {{- else }}
            - name: BOOTNODE_SEEDS
              valueFrom:
                configMapKeyRef:
                  name: {{ include "kmsBlockchainRPCGenesisConfigmapName" . }}
                  key: bootnode_seeds
            {{- end }}
            {{- if .Values.kmsBlockchainRpc.persistentPeers }}
            - name: PERSISTENT_PEERS
              value: {{ .Values.kmsBlockchainRpc.persistentPeers | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.kmsBlockchainRpc.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.kmsBlockchainValidator.healthcheck.path }}
              port: {{ .Values.kmsBlockchainValidator.healthcheck.port }}
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
          ports:
            {{- range $portName, $portNumber := .Values.kmsBlockchainRpc.exposedPorts }}
            - name: {{ $portName }}
              containerPort: {{ $portNumber }}
            {{- end }}
          workingDir: /root/
          volumeMounts:
            - mountPath: /root/
              name: workdir
            - mountPath: /root/.wasmd/data
              name: data
            - mountPath: /root/.wasmd/config/genesis.json
              subPath: genesis.json
              name: genesis
            - mountPath: /root/.wasmd/config/config.toml
              subPath: config.toml
              name: config-files
            - mountPath: /root/.wasmd/config/app.toml
              subPath: app.toml
              name: config-files
            - mountPath: /opt/start-rpc.sh
              subPath: start-rpc.sh
              name: config-files
      restartPolicy: Always
      imagePullSecrets:
        - name: registry-credentials
      volumes:
        - name: workdir
          emptyDir: {}
        - name: config-files
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ $kmsBlockchainRpcName }}-config
            defaultMode: 0777
            # An array of keys from the ConfigMap to create as files
            items:
            - key: "config.toml"
              path: "config.toml"
            - key: "app.toml"
              path: "app.toml"
            - key: "start-rpc.sh"
              path: "start-rpc.sh"
        - name: genesis
          configMap:
            name: {{ include "kmsBlockchainRPCGenesisConfigmapName" . }}
            defaultMode: 0777
            items:
              - key: "genesis.json"
                path: "genesis.json"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        labels:
          app: data
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.kmsBlockchainRpc.storage.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.kmsBlockchainRpc.storage.capacity }}
{{- end -}}
