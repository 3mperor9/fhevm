{{- if and .Values.gateway.enabled .Values.gateway.wallet.create -}}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: gateway
  name: {{ include "gatewayName" . }}-create-wallets
  annotations:
    "helm.sh/hook": "pre-install"
spec:
  template:
    metadata:
      labels:
        app: gateway
        app.kubernetes.io/name: {{ include "gatewayName" . }}-wallets
    spec:
      serviceAccountName: {{ include "gatewayName" . }}-wallets-writer
      containers:
        - name: create-gateway-wallets-secrets
          image: {{ .Values.gateway.wallet.image.name }}:{{ .Values.gateway.wallet.image.tag }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -eo pipefail
              create_secret() {
                  secret_name="${1}"
                  if [[ -z "$secret_name" ]]; then
                    echo "error: you must supply a secret name" 1>&2
                    exit 1
                  fi
                  if ! kubectl get secret ${secret_name}; then
                    kubectl create secret generic {{ .Values.gateway.wallet.secret.name }}
                  else
                    echo "skipping: secret ${secret_name} already exists" 2>&1
                  fi
              }
              add_key_to_secret() {
                secret_name="${1}"
                name="${2}"
                value="${3}"
                if [[ -z "$secret_name" ]]; then
                  echo "error: you must supply a secret name" 1>&2
                  exit 1
                fi
                if [[ -z "$name" ]]; then
                  echo "error: you must supply an item name" 1>&2
                  exit 1
                fi
                if [[ -z "$value" ]]; then
                  echo "error: you must supply an item value" 1>&2
                  exit 1
                fi
                kubectl patch secret "${secret_name}" -p="{\"data\": { \"${ name }\": \"${ value }\" } }"
              }

              SECRET_NAME="{{ .Values.gateway.wallet.secret.name }}"
              echo "creating kubernetes secret for zama chain wallets"
              create_secret "${SECRET_NAME}"

              echo "generating wallets"
              for k in {{ join " " .Values.gateway.wallet.names }}; do
                if [[ -z "$(kubectl get secret "${secret_name}" -o jsonpath="{.data.$k\.address}")" ]]; then
                  CREATE_RES="$(wasmd keys --keyring-backend memory add ${k} --output json)"
                  ADDRESS="$(echo $CREATE_RES | jq -r '.address')"
                  MNEMONIC="$(echo $CREATE_RES | jq -r '.mnemonic')"
                  PUB_KEY="$(echo $CREATE_RES | jq -r '.pubkey')"
                  HEX_CMD="$(wasmd debug addr ${ADDRESS} | sed '2q;d')"
                  HEX_ADDRESS="${HEX_CMD:15}"
                  # write private key
                  add_key_to_secret "${SECRET_NAME}" "${k}.address" "$(echo -n "${ADDRESS}" | base64 -w0)"
                  # write mnemonic key
                  add_key_to_secret "${SECRET_NAME}" "${k}.mnemonic" "$(echo -n "${MNEMONIC}" | base64 -w0)"
                  # write pubkey
                  add_key_to_secret "${SECRET_NAME}" "${k}.pubkey" "$(echo -n "${PUB_KEY}" | base64 -w0)"
                  # write hex
                  add_key_to_secret "${SECRET_NAME}" "${k}.hex" "$(echo -n "${HEX_ADDRESS}" | base64 -w0)"
                else
                  echo "key exists, skipping"
                fi
              done
      restartPolicy: Never
      imagePullSecrets:
        - name: registry-credentials
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "gatewayName" . }}-create-wallets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "gatewayName" . }}-secret-writer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["get", "watch", "list", "create", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "gatewayName" . }}-secret-writer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
subjects:
  - kind: ServiceAccount
    name: {{ include "gatewayName" . }}-create-wallets
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ include "gatewayName" . }}-secret-writer
  apiGroup: rbac.authorization.k8s.io
{{- end }}
