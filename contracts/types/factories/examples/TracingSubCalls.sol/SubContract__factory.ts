/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SubContract,
  SubContractInterface,
} from "../../../examples/TracingSubCalls.sol/SubContract";

const _abi = [
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "input",
        type: "uint256",
      },
    ],
    name: "fail2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "failSucceed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "invalidFail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "oogFail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "succeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "succeed2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "succeedFail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "succeedSelfDestruct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "succeedStop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061040b8061001d5f395ff3fe608060405234801561000f575f80fd5b50600436106100b9575f3560e01c8063acf495f311610072578063c9a758ef11610058578063c9a758ef146100f7578063d1ea1a5f146100ff578063efe93f6c14610107575f80fd5b8063acf495f3146100e7578063c54e64a3146100ef575f80fd5b8063a1dfaca8116100a2578063a1dfaca8146100cf578063a9cc4718146100d7578063ab218d82146100df575f80fd5b80630f829faa146100bd57806349253342146100c7575b5f80fd5b6100c561011a565b005b6100c5610171565b6100c561017c565b6100c561018c565b6100c56101e5565b6100c56101f0565b6100c56101fb565b6100c561020d565b6100c561021b565b6100c56101153660046103d0565b610273565b61012561025b6102eb565b50604051633bfa4fdb60e21b815261025c6004820152309063efe93f6c906024015f604051808303815f87803b15801561015d575f80fd5b505af192505050801561016e575060015b50565b6100c56102626102eb565b6101876102636102eb565b506001ff5b61019761025a6102eb565b5060405162461bcd60e51b815260206004820152601a60248201527f546869732066756e6374696f6e20616c77617973206661696c7300000000000060448201526064015b60405180910390fd5b61016e6102606102eb565b61016e6102596102eb565b61020661025f6102eb565b505b610208565b6102186102616102eb565b50fe5b604051633bfa4fdb60e21b815261025d6004820152309063efe93f6c906024015f604051808303815f87803b158015610252575f80fd5b505af1158015610264573d5f803e3d5ffd5b5050505061016e61025e6102eb565b61027c816102eb565b5060405162461bcd60e51b815260206004820152602c60248201527f546869732066756e6374696f6e20616c77617973206661696c7320776974682060448201527f637573746f6d20696e707574000000000000000000000000000000000000000060648201526084016101dc565b5f6102f78260056102fd565b92915050565b5f807fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6006001810154604051631ce2e8d760e31b8152600481018790527fff0000000000000000000000000000000000000000000000000000000000000060f887901b16602482015291925073ffffffffffffffffffffffffffffffffffffffff169063e71746b8906044016020604051808303815f875af11580156103a4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c891906103e7565b949350505050565b5f602082840312156103e0575f80fd5b5035919050565b5f602082840312156103f7575f80fd5b505191905056fea164736f6c6343000818000a";

type SubContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubContract__factory extends ContractFactory {
  constructor(...args: SubContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SubContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SubContract__factory {
    return super.connect(runner) as SubContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubContractInterface {
    return new Interface(_abi) as SubContractInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SubContract {
    return new Contract(address, _abi, runner) as unknown as SubContract;
  }
}
