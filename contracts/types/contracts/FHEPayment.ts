/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "authorizeAllContracts"
      | "becomeTransientSpender"
      | "depositETH"
      | "didAuthorizeAllContracts"
      | "didWhitelistContract"
      | "getAvailableDepositsETH"
      | "getClaimableUsedFHEGas"
      | "getTFHEExecutorAddress"
      | "getVersion"
      | "initialize"
      | "owner"
      | "payForCast"
      | "payForFheAdd"
      | "payForFheBitAnd"
      | "payForFheBitOr"
      | "payForFheBitXor"
      | "payForFheDiv"
      | "payForFheEq"
      | "payForFheGe"
      | "payForFheGt"
      | "payForFheLe"
      | "payForFheLt"
      | "payForFheMax"
      | "payForFheMin"
      | "payForFheMul"
      | "payForFheNe"
      | "payForFheNeg"
      | "payForFheNot"
      | "payForFheRand"
      | "payForFheRandBounded"
      | "payForFheRem"
      | "payForFheRotl"
      | "payForFheRotr"
      | "payForFheShl"
      | "payForFheShr"
      | "payForFheSub"
      | "payForIfThenElse"
      | "payForTrivialEncrypt"
      | "pendingOwner"
      | "proxiableUUID"
      | "recoverBurntFunds"
      | "removeAuthorizationAllContracts"
      | "removeWhitelistedContract"
      | "renounceOwnership"
      | "stopBeingTransientSpender"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "whitelistContract"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "becomeTransientSpender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didAuthorizeAllContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didWhitelistContract",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableDepositsETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableUsedFHEGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTFHEExecutorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payForCast",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheAdd",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheBitAnd",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheBitOr",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheBitXor",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheDiv",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheEq",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheGe",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheGt",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheLe",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheLt",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheMax",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheMin",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheMul",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheNe",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheNeg",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheNot",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheRand",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheRandBounded",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheRem",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheRotl",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheRotr",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheShl",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheShr",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFheSub",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payForIfThenElse",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForTrivialEncrypt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverBurntFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizationAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopBeingTransientSpender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeTransientSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didAuthorizeAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didWhitelistContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableDepositsETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableUsedFHEGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTFHEExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payForCast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payForFheAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheBitAnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheBitOr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheBitXor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheDiv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheEq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheGe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheGt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheLe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheLt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheMul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheNe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheNeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheNot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheRand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheRandBounded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheRem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheRotl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheRotr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheShl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheShr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFheSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForIfThenElse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForTrivialEncrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverBurntFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizationAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBeingTransientSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEPayment extends BaseContract {
  connect(runner?: ContractRunner | null): FHEPayment;
  waitForDeployment(): Promise<this>;

  interface: FHEPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  authorizeAllContracts: TypedContractMethod<[], [void], "nonpayable">;

  becomeTransientSpender: TypedContractMethod<[], [void], "nonpayable">;

  depositETH: TypedContractMethod<[account: AddressLike], [void], "payable">;

  didAuthorizeAllContracts: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  didWhitelistContract: TypedContractMethod<
    [user: AddressLike, dappContract: AddressLike],
    [boolean],
    "view"
  >;

  getAvailableDepositsETH: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getClaimableUsedFHEGas: TypedContractMethod<[], [bigint], "view">;

  getTFHEExecutorAddress: TypedContractMethod<[], [string], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payForCast: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForFheAdd: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheBitAnd: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheBitOr: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheBitXor: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheDiv: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheEq: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheGe: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheGt: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheLe: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheLt: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheMax: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheMin: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheMul: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheNe: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheNeg: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForFheNot: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForFheRand: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForFheRandBounded: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForFheRem: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheRotl: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheRotr: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheShl: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheShr: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForFheSub: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;

  payForIfThenElse: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  payForTrivialEncrypt: TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  recoverBurntFunds: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAuthorizationAllContracts: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  removeWhitelistedContract: TypedContractMethod<
    [dappContract: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stopBeingTransientSpender: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  whitelistContract: TypedContractMethod<
    [dappContract: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeAllContracts"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "becomeTransientSpender"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[account: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "didAuthorizeAllContracts"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "didWhitelistContract"
  ): TypedContractMethod<
    [user: AddressLike, dappContract: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableDepositsETH"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimableUsedFHEGas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTFHEExecutorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[initialOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payForCast"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheAdd"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheBitAnd"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheBitOr"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheBitXor"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheDiv"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheEq"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheGe"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheGt"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheLe"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheLt"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheMax"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheMin"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheMul"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheNe"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheNeg"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheNot"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheRand"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheRandBounded"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheRem"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheRotl"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheRotr"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheShl"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheShr"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForFheSub"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish, scalarByte: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForIfThenElse"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payForTrivialEncrypt"
  ): TypedContractMethod<
    [payer: AddressLike, resultType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverBurntFunds"
  ): TypedContractMethod<[receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorizationAllContracts"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWhitelistedContract"
  ): TypedContractMethod<[dappContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopBeingTransientSpender"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelistContract"
  ): TypedContractMethod<[dappContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
