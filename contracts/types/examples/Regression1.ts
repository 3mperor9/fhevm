/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Regression1 {
  export type ServiceStruct = {
    id: BytesLike;
    serviceType: string;
    serviceEndpoint: string;
  };

  export type ServiceStructOutput = [
    id: string,
    serviceType: string,
    serviceEndpoint: string
  ] & { id: string; serviceType: string; serviceEndpoint: string };
}

export interface Regression1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addServices"
      | "getServices"
      | "metadata"
      | "removeService"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addServices",
    values: [Regression1.ServiceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getServices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeService",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeService",
    data: BytesLike
  ): Result;
}

export interface Regression1 extends BaseContract {
  connect(runner?: ContractRunner | null): Regression1;
  waitForDeployment(): Promise<this>;

  interface: Regression1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addServices: TypedContractMethod<
    [services: Regression1.ServiceStruct[]],
    [void],
    "nonpayable"
  >;

  getServices: TypedContractMethod<
    [id: AddressLike],
    [Regression1.ServiceStructOutput[]],
    "view"
  >;

  metadata: TypedContractMethod<
    [id: AddressLike],
    [
      [bigint, bigint, bigint] & {
        created: bigint;
        lastUpdated: bigint;
        versionId: bigint;
      }
    ],
    "view"
  >;

  removeService: TypedContractMethod<
    [serviceIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addServices"
  ): TypedContractMethod<
    [services: Regression1.ServiceStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getServices"
  ): TypedContractMethod<
    [id: AddressLike],
    [Regression1.ServiceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "metadata"
  ): TypedContractMethod<
    [id: AddressLike],
    [
      [bigint, bigint, bigint] & {
        created: bigint;
        lastUpdated: bigint;
        versionId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeService"
  ): TypedContractMethod<[serviceIndex: BigNumberish], [void], "nonpayable">;

  filters: {};
}
