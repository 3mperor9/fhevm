/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestAsyncDecryptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackAddress"
      | "callbackAddresses"
      | "callbackBool"
      | "callbackBoolInfinite"
      | "callbackBoolTrustless"
      | "callbackBytes128"
      | "callbackBytes256"
      | "callbackBytes256Trustless"
      | "callbackBytes64"
      | "callbackMixed"
      | "callbackMixedBytes256"
      | "callbackMixedBytes256Trustless"
      | "callbackUint128"
      | "callbackUint16"
      | "callbackUint256"
      | "callbackUint32"
      | "callbackUint4"
      | "callbackUint64"
      | "callbackUint8"
      | "latestRequestID"
      | "requestAddress"
      | "requestBool"
      | "requestBoolAboveDelay"
      | "requestBoolInfinite"
      | "requestBoolTrustless"
      | "requestEbytes128NonTrivial"
      | "requestEbytes128Trivial"
      | "requestEbytes256NonTrivial"
      | "requestEbytes256NonTrivialTrustless"
      | "requestEbytes256Trivial"
      | "requestEbytes64NonTrivial"
      | "requestEbytes64Trivial"
      | "requestFakeAddress"
      | "requestFakeBool"
      | "requestFakeUint16"
      | "requestFakeUint32"
      | "requestFakeUint4"
      | "requestFakeUint64"
      | "requestFakeUint8"
      | "requestMixed"
      | "requestMixedBytes256"
      | "requestMixedBytes256Trustless"
      | "requestSeveralAddresses"
      | "requestUint128"
      | "requestUint128NonTrivial"
      | "requestUint16"
      | "requestUint256"
      | "requestUint256NonTrivial"
      | "requestUint32"
      | "requestUint4"
      | "requestUint64"
      | "requestUint64NonTrivial"
      | "requestUint8"
      | "yAddress"
      | "yAddress2"
      | "yBool"
      | "yBytes128"
      | "yBytes256"
      | "yBytes64"
      | "yUint128"
      | "yUint16"
      | "yUint256"
      | "yUint32"
      | "yUint4"
      | "yUint64"
      | "yUint64_2"
      | "yUint64_3"
      | "yUint8"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callbackAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackAddresses",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBool",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBoolInfinite",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBoolTrustless",
    values: [BigNumberish, boolean, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBytes128",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBytes256",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBytes256Trustless",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackBytes64",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackMixed",
    values: [
      BigNumberish,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackMixedBytes256",
    values: [BigNumberish, boolean, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackMixedBytes256Trustless",
    values: [BigNumberish, boolean, BytesLike, AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint16",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint256",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint32",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint4",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint64",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackUint8",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBoolAboveDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBoolInfinite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBoolTrustless",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes128NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes128Trivial",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes256NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes256NonTrivialTrustless",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes256Trivial",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes64NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEbytes64Trivial",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeUint16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeUint32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeUint4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeUint64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFakeUint8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMixed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestMixedBytes256",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestMixedBytes256Trustless",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSeveralAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint128NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint256NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint32",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint64NonTrivial",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUint8",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "yAddress2", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBool", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes128", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes256", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes64", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint128", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint16", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint256", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint32", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint4", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint64", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint64_2", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint64_3", values?: undefined): string;
  encodeFunctionData(functionFragment: "yUint8", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "callbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBoolInfinite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBoolTrustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBytes128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBytes256Trustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackBytes64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackMixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackMixedBytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackMixedBytes256Trustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackUint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBoolAboveDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBoolInfinite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBoolTrustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes128NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes128Trivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes256NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes256NonTrivialTrustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes256Trivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes64NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEbytes64Trivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeUint16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeUint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeUint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeUint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFakeUint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMixedBytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMixedBytes256Trustless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSeveralAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint128NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint256NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint64NonTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yAddress2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint64_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint64_3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yUint8", data: BytesLike): Result;
}

export interface TestAsyncDecrypt extends BaseContract {
  connect(runner?: ContractRunner | null): TestAsyncDecrypt;
  waitForDeployment(): Promise<this>;

  interface: TestAsyncDecryptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackAddress: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: AddressLike],
    [string],
    "nonpayable"
  >;

  callbackAddresses: TypedContractMethod<
    [
      arg0: BigNumberish,
      decryptedInput1: AddressLike,
      decryptedInput2: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  callbackBool: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: boolean],
    [boolean],
    "nonpayable"
  >;

  callbackBoolInfinite: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: boolean],
    [boolean],
    "nonpayable"
  >;

  callbackBoolTrustless: TypedContractMethod<
    [requestID: BigNumberish, decryptedInput: boolean, signatures: BytesLike[]],
    [boolean],
    "nonpayable"
  >;

  callbackBytes128: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;

  callbackBytes256: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;

  callbackBytes256Trustless: TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptedInput: BytesLike,
      signatures: BytesLike[]
    ],
    [string],
    "nonpayable"
  >;

  callbackBytes64: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;

  callbackMixed: TypedContractMethod<
    [
      requestID: BigNumberish,
      decBool_1: boolean,
      decBool_2: boolean,
      decUint4: BigNumberish,
      decUint8: BigNumberish,
      decUint16: BigNumberish,
      decUint32: BigNumberish,
      decUint64_1: BigNumberish,
      decUint64_2: BigNumberish,
      decUint64_3: BigNumberish,
      decAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  callbackMixedBytes256: TypedContractMethod<
    [
      arg0: BigNumberish,
      decBool: boolean,
      decAddress: AddressLike,
      bytesRes: BytesLike,
      bytesRes2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackMixedBytes256Trustless: TypedContractMethod<
    [
      requestID: BigNumberish,
      decBool: boolean,
      bytesRes: BytesLike,
      decAddress: AddressLike,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  callbackUint128: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint16: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint256: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint32: TypedContractMethod<
    [requestID: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint4: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint64: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  callbackUint8: TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  latestRequestID: TypedContractMethod<[], [bigint], "view">;

  requestAddress: TypedContractMethod<[], [void], "nonpayable">;

  requestBool: TypedContractMethod<[], [void], "nonpayable">;

  requestBoolAboveDelay: TypedContractMethod<[], [void], "nonpayable">;

  requestBoolInfinite: TypedContractMethod<[], [void], "nonpayable">;

  requestBoolTrustless: TypedContractMethod<[], [void], "nonpayable">;

  requestEbytes128NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes128Trivial: TypedContractMethod<
    [value: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes256NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes256NonTrivialTrustless: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes256Trivial: TypedContractMethod<
    [value: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes64NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestEbytes64Trivial: TypedContractMethod<
    [value: BytesLike],
    [void],
    "nonpayable"
  >;

  requestFakeAddress: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeBool: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeUint16: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeUint32: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeUint4: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeUint64: TypedContractMethod<[], [void], "nonpayable">;

  requestFakeUint8: TypedContractMethod<[], [void], "nonpayable">;

  requestMixed: TypedContractMethod<
    [input1: BigNumberish, input2: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestMixedBytes256: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestMixedBytes256Trustless: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestSeveralAddresses: TypedContractMethod<[], [void], "nonpayable">;

  requestUint128: TypedContractMethod<[], [void], "nonpayable">;

  requestUint128NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestUint16: TypedContractMethod<[], [void], "nonpayable">;

  requestUint256: TypedContractMethod<[], [void], "nonpayable">;

  requestUint256NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestUint32: TypedContractMethod<
    [input1: BigNumberish, input2: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestUint4: TypedContractMethod<[], [void], "nonpayable">;

  requestUint64: TypedContractMethod<[], [void], "nonpayable">;

  requestUint64NonTrivial: TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  requestUint8: TypedContractMethod<[], [void], "nonpayable">;

  yAddress: TypedContractMethod<[], [string], "view">;

  yAddress2: TypedContractMethod<[], [string], "view">;

  yBool: TypedContractMethod<[], [boolean], "view">;

  yBytes128: TypedContractMethod<[], [string], "view">;

  yBytes256: TypedContractMethod<[], [string], "view">;

  yBytes64: TypedContractMethod<[], [string], "view">;

  yUint128: TypedContractMethod<[], [bigint], "view">;

  yUint16: TypedContractMethod<[], [bigint], "view">;

  yUint256: TypedContractMethod<[], [bigint], "view">;

  yUint32: TypedContractMethod<[], [bigint], "view">;

  yUint4: TypedContractMethod<[], [bigint], "view">;

  yUint64: TypedContractMethod<[], [bigint], "view">;

  yUint64_2: TypedContractMethod<[], [bigint], "view">;

  yUint64_3: TypedContractMethod<[], [bigint], "view">;

  yUint8: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackAddress"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackAddresses"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      decryptedInput1: AddressLike,
      decryptedInput2: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBool"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBoolInfinite"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBoolTrustless"
  ): TypedContractMethod<
    [requestID: BigNumberish, decryptedInput: boolean, signatures: BytesLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBytes128"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBytes256"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBytes256Trustless"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptedInput: BytesLike,
      signatures: BytesLike[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackBytes64"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackMixed"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      decBool_1: boolean,
      decBool_2: boolean,
      decUint4: BigNumberish,
      decUint8: BigNumberish,
      decUint16: BigNumberish,
      decUint32: BigNumberish,
      decUint64_1: BigNumberish,
      decUint64_2: BigNumberish,
      decUint64_3: BigNumberish,
      decAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackMixedBytes256"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      decBool: boolean,
      decAddress: AddressLike,
      bytesRes: BytesLike,
      bytesRes2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackMixedBytes256Trustless"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      decBool: boolean,
      bytesRes: BytesLike,
      decAddress: AddressLike,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint128"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint16"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint256"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint32"
  ): TypedContractMethod<
    [requestID: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint4"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint64"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackUint8"
  ): TypedContractMethod<
    [arg0: BigNumberish, decryptedInput: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestRequestID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBool"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBoolAboveDelay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBoolInfinite"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBoolTrustless"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEbytes128NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestEbytes128Trivial"
  ): TypedContractMethod<[value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEbytes256NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestEbytes256NonTrivialTrustless"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestEbytes256Trivial"
  ): TypedContractMethod<[value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEbytes64NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestEbytes64Trivial"
  ): TypedContractMethod<[value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeBool"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeUint16"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeUint32"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeUint4"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeUint64"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFakeUint8"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestMixed"
  ): TypedContractMethod<
    [input1: BigNumberish, input2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMixedBytes256"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMixedBytes256Trustless"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSeveralAddresses"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint128"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint128NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestUint16"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint256"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint256NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestUint32"
  ): TypedContractMethod<
    [input1: BigNumberish, input2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestUint4"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint64"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUint64NonTrivial"
  ): TypedContractMethod<
    [inputHandle: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestUint8"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yAddress2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yBool"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "yBytes128"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yBytes256"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yBytes64"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yUint128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint16"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint32"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint4"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint64_2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint64_3"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yUint8"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
