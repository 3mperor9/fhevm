/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RandInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "failingCall"
      | "generate1024"
      | "generate128"
      | "generate128UpperBound"
      | "generate16"
      | "generate16UpperBound"
      | "generate2048"
      | "generate256"
      | "generate256UpperBound"
      | "generate32"
      | "generate32UpperBound"
      | "generate4"
      | "generate4UpperBound"
      | "generate512"
      | "generate64"
      | "generate64Reverting"
      | "generate64UpperBound"
      | "generate8"
      | "generate8UpperBound"
      | "generateBool"
      | "value1024"
      | "value128"
      | "value16"
      | "value2048"
      | "value256"
      | "value32"
      | "value4"
      | "value512"
      | "value64"
      | "value64Bounded"
      | "value8"
      | "valueb"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "failingCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate1024",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate128UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generate16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate16UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generate2048",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate256UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generate32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate32UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "generate4", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generate4UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generate512",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate64Reverting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generate64UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "generate8", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generate8UpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateBool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "value1024", values?: undefined): string;
  encodeFunctionData(functionFragment: "value128", values?: undefined): string;
  encodeFunctionData(functionFragment: "value16", values?: undefined): string;
  encodeFunctionData(functionFragment: "value2048", values?: undefined): string;
  encodeFunctionData(functionFragment: "value256", values?: undefined): string;
  encodeFunctionData(functionFragment: "value32", values?: undefined): string;
  encodeFunctionData(functionFragment: "value4", values?: undefined): string;
  encodeFunctionData(functionFragment: "value512", values?: undefined): string;
  encodeFunctionData(functionFragment: "value64", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "value64Bounded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "value8", values?: undefined): string;
  encodeFunctionData(functionFragment: "valueb", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "failingCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate1024",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate128UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate16", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generate16UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate2048",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate256UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generate32UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate4", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generate4UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate512",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generate64Reverting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generate64UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generate8UpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value1024", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value2048", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value512", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "value64Bounded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valueb", data: BytesLike): Result;
}

export interface Rand extends BaseContract {
  connect(runner?: ContractRunner | null): Rand;
  waitForDeployment(): Promise<this>;

  interface: RandInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  failingCall: TypedContractMethod<[], [void], "nonpayable">;

  generate1024: TypedContractMethod<[], [void], "nonpayable">;

  generate128: TypedContractMethod<[], [void], "nonpayable">;

  generate128UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate16: TypedContractMethod<[], [void], "nonpayable">;

  generate16UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate2048: TypedContractMethod<[], [void], "nonpayable">;

  generate256: TypedContractMethod<[], [void], "nonpayable">;

  generate256UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate32: TypedContractMethod<[], [void], "nonpayable">;

  generate32UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate4: TypedContractMethod<[], [void], "nonpayable">;

  generate4UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate512: TypedContractMethod<[], [void], "nonpayable">;

  generate64: TypedContractMethod<[], [void], "nonpayable">;

  generate64Reverting: TypedContractMethod<[], [void], "nonpayable">;

  generate64UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generate8: TypedContractMethod<[], [void], "nonpayable">;

  generate8UpperBound: TypedContractMethod<
    [upperBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  generateBool: TypedContractMethod<[], [void], "nonpayable">;

  value1024: TypedContractMethod<[], [bigint], "view">;

  value128: TypedContractMethod<[], [bigint], "view">;

  value16: TypedContractMethod<[], [bigint], "view">;

  value2048: TypedContractMethod<[], [bigint], "view">;

  value256: TypedContractMethod<[], [bigint], "view">;

  value32: TypedContractMethod<[], [bigint], "view">;

  value4: TypedContractMethod<[], [bigint], "view">;

  value512: TypedContractMethod<[], [bigint], "view">;

  value64: TypedContractMethod<[], [bigint], "view">;

  value64Bounded: TypedContractMethod<[], [bigint], "view">;

  value8: TypedContractMethod<[], [bigint], "view">;

  valueb: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "failingCall"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate1024"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate128"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate128UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate16"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate16UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate2048"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate256"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate256UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate32"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate32UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate4"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate4UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate512"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate64"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate64Reverting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate64UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate8"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generate8UpperBound"
  ): TypedContractMethod<[upperBound: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateBool"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "value1024"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value16"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value2048"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value32"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value4"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value512"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value64Bounded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "value8"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "valueb"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
