/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ReencryptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "xAddress"
      | "xBool"
      | "xUint128"
      | "xUint16"
      | "xUint256"
      | "xUint32"
      | "xUint4"
      | "xUint64"
      | "xUint8"
      | "yBytes128"
      | "yBytes256"
      | "yBytes64"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "xAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "xBool", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint128", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint16", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint256", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint32", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint4", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint64", values?: undefined): string;
  encodeFunctionData(functionFragment: "xUint8", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes128", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes256", values?: undefined): string;
  encodeFunctionData(functionFragment: "yBytes64", values?: undefined): string;

  decodeFunctionResult(functionFragment: "xAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xUint8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yBytes64", data: BytesLike): Result;
}

export interface Reencrypt extends BaseContract {
  connect(runner?: ContractRunner | null): Reencrypt;
  waitForDeployment(): Promise<this>;

  interface: ReencryptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  xAddress: TypedContractMethod<[], [bigint], "view">;

  xBool: TypedContractMethod<[], [bigint], "view">;

  xUint128: TypedContractMethod<[], [bigint], "view">;

  xUint16: TypedContractMethod<[], [bigint], "view">;

  xUint256: TypedContractMethod<[], [bigint], "view">;

  xUint32: TypedContractMethod<[], [bigint], "view">;

  xUint4: TypedContractMethod<[], [bigint], "view">;

  xUint64: TypedContractMethod<[], [bigint], "view">;

  xUint8: TypedContractMethod<[], [bigint], "view">;

  yBytes128: TypedContractMethod<[], [bigint], "view">;

  yBytes256: TypedContractMethod<[], [bigint], "view">;

  yBytes64: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "xAddress"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xBool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint16"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint32"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint4"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xUint8"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yBytes128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yBytes256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yBytes64"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
