/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TFHEManualTestSuiteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eqEbool"
      | "eqEboolScalarL"
      | "eqEboolScalarR"
      | "eqEbytes128"
      | "eqEbytes128ScalarL"
      | "eqEbytes128ScalarR"
      | "eqEbytes256"
      | "eqEbytes256ScalarL"
      | "eqEbytes256ScalarR"
      | "eqEbytes64"
      | "eqEbytes64ScalarL"
      | "eqEbytes64ScalarR"
      | "neEbool"
      | "neEboolScalarL"
      | "neEboolScalarR"
      | "neEbytes128"
      | "neEbytes128ScalarL"
      | "neEbytes128ScalarR"
      | "neEbytes256"
      | "neEbytes256ScalarL"
      | "neEbytes256ScalarR"
      | "neEbytes64"
      | "neEbytes64ScalarL"
      | "neEbytes64ScalarR"
      | "res128"
      | "res16"
      | "res256"
      | "res32"
      | "res4"
      | "res64"
      | "res8"
      | "resAdd"
      | "resB128"
      | "resB256"
      | "resB64"
      | "resb"
      | "test_ebool_and"
      | "test_ebool_and_scalarL"
      | "test_ebool_and_scalarR"
      | "test_ebool_not"
      | "test_ebool_or"
      | "test_ebool_or_scalarL"
      | "test_ebool_or_scalarR"
      | "test_ebool_to_euint128_cast"
      | "test_ebool_to_euint16_cast"
      | "test_ebool_to_euint256_cast"
      | "test_ebool_to_euint32_cast"
      | "test_ebool_to_euint4_cast"
      | "test_ebool_to_euint64_cast"
      | "test_ebool_to_euint8_cast"
      | "test_ebool_xor"
      | "test_ebool_xor_scalarL"
      | "test_ebool_xor_scalarR"
      | "test_eq_address_eaddress"
      | "test_eq_eaddress_address"
      | "test_eq_eaddress_eaddress"
      | "test_euint128_to_euint8_cast"
      | "test_euint4_to_euint256_cast"
      | "test_ne_address_eaddress"
      | "test_ne_eaddress_address"
      | "test_ne_eaddress_eaddress"
      | "test_select"
      | "test_select_eaddress"
      | "test_select_ebool"
      | "test_select_ebytes128"
      | "test_select_ebytes256"
      | "test_select_ebytes64"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eqEbool",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEboolScalarL",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEboolScalarR",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes128",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes128ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes128ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes256",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes256ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes256ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes64",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes64ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eqEbytes64ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbool",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "neEboolScalarL",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "neEboolScalarR",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes128",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes128ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes128ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes256",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes256ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes256ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes64",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes64ScalarL",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "neEbytes64ScalarR",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "res128", values?: undefined): string;
  encodeFunctionData(functionFragment: "res16", values?: undefined): string;
  encodeFunctionData(functionFragment: "res256", values?: undefined): string;
  encodeFunctionData(functionFragment: "res32", values?: undefined): string;
  encodeFunctionData(functionFragment: "res4", values?: undefined): string;
  encodeFunctionData(functionFragment: "res64", values?: undefined): string;
  encodeFunctionData(functionFragment: "res8", values?: undefined): string;
  encodeFunctionData(functionFragment: "resAdd", values?: undefined): string;
  encodeFunctionData(functionFragment: "resB128", values?: undefined): string;
  encodeFunctionData(functionFragment: "resB256", values?: undefined): string;
  encodeFunctionData(functionFragment: "resB64", values?: undefined): string;
  encodeFunctionData(functionFragment: "resb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_ebool_and",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_and_scalarL",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_and_scalarR",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_not",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_or",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_or_scalarL",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_or_scalarR",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint128_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint16_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint256_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint32_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint4_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint64_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_to_euint8_cast",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_xor",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_xor_scalarL",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ebool_xor_scalarR",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_eq_address_eaddress",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_eq_eaddress_address",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_eq_eaddress_eaddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_euint128_to_euint8_cast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_euint4_to_euint256_cast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ne_address_eaddress",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ne_eaddress_address",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ne_eaddress_eaddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select_eaddress",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select_ebool",
    values: [boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select_ebytes128",
    values: [boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select_ebytes256",
    values: [boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test_select_ebytes64",
    values: [boolean, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "eqEbool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eqEboolScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEboolScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes128ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes128ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes256ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes256ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eqEbytes64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes64ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqEbytes64ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "neEbool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "neEboolScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEboolScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes128ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes128ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes256ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes256ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "neEbytes64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes64ScalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neEbytes64ScalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "res128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resB128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resB256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resB64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_and",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_and_scalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_and_scalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_not",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_or",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_or_scalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_or_scalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint128_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint16_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint256_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint32_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint4_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint64_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_to_euint8_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_xor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_xor_scalarL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ebool_xor_scalarR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_eq_address_eaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_eq_eaddress_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_eq_eaddress_eaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_euint128_to_euint8_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_euint4_to_euint256_cast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ne_address_eaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ne_eaddress_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ne_eaddress_eaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select_eaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select_ebool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select_ebytes128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select_ebytes256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_select_ebytes64",
    data: BytesLike
  ): Result;
}

export interface TFHEManualTestSuite extends BaseContract {
  connect(runner?: ContractRunner | null): TFHEManualTestSuite;
  waitForDeployment(): Promise<this>;

  interface: TFHEManualTestSuiteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eqEbool: TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;

  eqEboolScalarL: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  eqEboolScalarR: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  eqEbytes128: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes128ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes128ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes256: TypedContractMethod<
    [
      inp1: BytesLike,
      inputProof1: BytesLike,
      inp2: BytesLike,
      inputProof2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  eqEbytes256ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes256ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes64: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes64ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  eqEbytes64ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbool: TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;

  neEboolScalarL: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  neEboolScalarR: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  neEbytes128: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes128ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes128ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes256: TypedContractMethod<
    [
      inp1: BytesLike,
      inputProof1: BytesLike,
      inp2: BytesLike,
      inputProof2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  neEbytes256ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes256ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes64: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes64ScalarL: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  neEbytes64ScalarR: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [void],
    "nonpayable"
  >;

  res128: TypedContractMethod<[], [bigint], "view">;

  res16: TypedContractMethod<[], [bigint], "view">;

  res256: TypedContractMethod<[], [bigint], "view">;

  res32: TypedContractMethod<[], [bigint], "view">;

  res4: TypedContractMethod<[], [bigint], "view">;

  res64: TypedContractMethod<[], [bigint], "view">;

  res8: TypedContractMethod<[], [bigint], "view">;

  resAdd: TypedContractMethod<[], [bigint], "view">;

  resB128: TypedContractMethod<[], [bigint], "view">;

  resB256: TypedContractMethod<[], [bigint], "view">;

  resB64: TypedContractMethod<[], [bigint], "view">;

  resb: TypedContractMethod<[], [bigint], "view">;

  test_ebool_and: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_and_scalarL: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_and_scalarR: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_not: TypedContractMethod<[input: boolean], [void], "nonpayable">;

  test_ebool_or: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_or_scalarL: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_or_scalarR: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint128_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint16_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint256_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint32_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint4_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint64_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_to_euint8_cast: TypedContractMethod<
    [input: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_xor: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_xor_scalarL: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_ebool_xor_scalarR: TypedContractMethod<
    [a: boolean, b: boolean],
    [void],
    "nonpayable"
  >;

  test_eq_address_eaddress: TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_eq_eaddress_address: TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_eq_eaddress_eaddress: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_euint128_to_euint8_cast: TypedContractMethod<
    [input: BigNumberish],
    [void],
    "nonpayable"
  >;

  test_euint4_to_euint256_cast: TypedContractMethod<
    [input: BigNumberish],
    [void],
    "nonpayable"
  >;

  test_ne_address_eaddress: TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_ne_eaddress_address: TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_ne_eaddress_eaddress: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  test_select: TypedContractMethod<
    [
      control: BytesLike,
      ifTrue: BytesLike,
      ifFalse: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  test_select_eaddress: TypedContractMethod<
    [
      control: BytesLike,
      ifTrue: BytesLike,
      ifFalse: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  test_select_ebool: TypedContractMethod<
    [control: boolean, ifTrue: boolean, ifFalse: boolean],
    [void],
    "nonpayable"
  >;

  test_select_ebytes128: TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;

  test_select_ebytes256: TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;

  test_select_ebytes64: TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eqEbool"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEboolScalarL"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEboolScalarR"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes128"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes128ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes128ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes256"
  ): TypedContractMethod<
    [
      inp1: BytesLike,
      inputProof1: BytesLike,
      inp2: BytesLike,
      inputProof2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eqEbytes256ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes256ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes64"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes64ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eqEbytes64ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbool"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEboolScalarL"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEboolScalarR"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes128"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes128ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes128ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes256"
  ): TypedContractMethod<
    [
      inp1: BytesLike,
      inputProof1: BytesLike,
      inp2: BytesLike,
      inputProof2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "neEbytes256ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes256ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes64"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes64ScalarL"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "neEbytes64ScalarR"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "res128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res16"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res32"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res4"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res8"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resAdd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resB128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resB256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resB64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resb"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "test_ebool_and"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_and_scalarL"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_and_scalarR"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_not"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_or"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_or_scalarL"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_or_scalarR"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint128_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint16_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint256_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint32_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint4_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint64_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_to_euint8_cast"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_xor"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_xor_scalarL"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ebool_xor_scalarR"
  ): TypedContractMethod<[a: boolean, b: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_eq_address_eaddress"
  ): TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_eq_eaddress_address"
  ): TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_eq_eaddress_eaddress"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_euint128_to_euint8_cast"
  ): TypedContractMethod<[input: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_euint4_to_euint256_cast"
  ): TypedContractMethod<[input: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_ne_address_eaddress"
  ): TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_ne_eaddress_address"
  ): TypedContractMethod<
    [a: BytesLike, b: AddressLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_ne_eaddress_eaddress"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select"
  ): TypedContractMethod<
    [
      control: BytesLike,
      ifTrue: BytesLike,
      ifFalse: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select_eaddress"
  ): TypedContractMethod<
    [
      control: BytesLike,
      ifTrue: BytesLike,
      ifFalse: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select_ebool"
  ): TypedContractMethod<
    [control: boolean, ifTrue: boolean, ifFalse: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select_ebytes128"
  ): TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select_ebytes256"
  ): TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test_select_ebytes64"
  ): TypedContractMethod<
    [control: boolean, ifTrue: BytesLike, ifFalse: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
