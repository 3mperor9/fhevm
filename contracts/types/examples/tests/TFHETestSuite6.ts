/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TFHETestSuite6Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "add_euint32_euint128"
      | "add_euint32_euint256"
      | "add_euint32_uint32"
      | "add_euint64_euint4"
      | "add_euint64_euint8"
      | "add_uint32_euint32"
      | "and_euint32_euint128"
      | "and_euint32_euint256"
      | "and_euint32_uint32"
      | "and_euint64_euint4"
      | "and_euint64_euint8"
      | "and_uint32_euint32"
      | "div_euint32_uint32"
      | "eq_euint32_euint128"
      | "eq_euint32_euint256"
      | "eq_euint32_uint32"
      | "eq_euint64_euint4"
      | "eq_euint64_euint8"
      | "eq_uint32_euint32"
      | "ge_euint32_euint128"
      | "ge_euint32_euint256"
      | "ge_euint32_uint32"
      | "ge_euint64_euint4"
      | "ge_euint64_euint8"
      | "ge_uint32_euint32"
      | "gt_euint32_euint128"
      | "gt_euint32_euint256"
      | "gt_euint32_uint32"
      | "gt_euint64_euint4"
      | "gt_euint64_euint8"
      | "gt_uint32_euint32"
      | "le_euint32_euint128"
      | "le_euint32_euint256"
      | "le_euint32_euint64"
      | "le_euint32_uint32"
      | "le_euint64_euint4"
      | "le_euint64_euint8"
      | "le_uint32_euint32"
      | "lt_euint32_euint128"
      | "lt_euint32_euint256"
      | "lt_euint32_euint64"
      | "lt_euint32_uint32"
      | "lt_euint64_euint4"
      | "lt_euint64_euint8"
      | "lt_uint32_euint32"
      | "max_euint32_euint128"
      | "max_euint32_euint256"
      | "max_euint32_euint64"
      | "max_euint32_uint32"
      | "max_euint64_euint4"
      | "max_euint64_euint8"
      | "max_uint32_euint32"
      | "min_euint32_euint128"
      | "min_euint32_euint256"
      | "min_euint32_euint64"
      | "min_euint32_uint32"
      | "min_euint64_euint4"
      | "min_euint64_euint8"
      | "min_uint32_euint32"
      | "mul_euint32_euint128"
      | "mul_euint32_euint256"
      | "mul_euint32_uint32"
      | "mul_euint64_euint4"
      | "mul_euint64_euint8"
      | "mul_uint32_euint32"
      | "ne_euint32_euint128"
      | "ne_euint32_euint256"
      | "ne_euint32_uint32"
      | "ne_euint64_euint4"
      | "ne_euint64_euint8"
      | "ne_uint32_euint32"
      | "or_euint32_euint128"
      | "or_euint32_euint256"
      | "or_euint32_uint32"
      | "or_euint64_euint4"
      | "or_euint64_euint8"
      | "or_uint32_euint32"
      | "rem_euint32_uint32"
      | "res128"
      | "res16"
      | "res256"
      | "res32"
      | "res4"
      | "res64"
      | "res8"
      | "resb"
      | "sub_euint32_euint128"
      | "sub_euint32_euint256"
      | "sub_euint32_uint32"
      | "sub_euint64_euint4"
      | "sub_euint64_euint8"
      | "sub_uint32_euint32"
      | "xor_euint32_euint128"
      | "xor_euint32_euint256"
      | "xor_euint32_uint32"
      | "xor_euint64_euint4"
      | "xor_euint64_euint8"
      | "xor_uint32_euint32"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "and_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "div_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eq_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ge_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gt_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint32_euint64",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "le_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint32_euint64",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint32_euint64",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "max_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint32_euint64",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "min_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ne_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "or_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rem_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "res128", values?: undefined): string;
  encodeFunctionData(functionFragment: "res16", values?: undefined): string;
  encodeFunctionData(functionFragment: "res256", values?: undefined): string;
  encodeFunctionData(functionFragment: "res32", values?: undefined): string;
  encodeFunctionData(functionFragment: "res4", values?: undefined): string;
  encodeFunctionData(functionFragment: "res64", values?: undefined): string;
  encodeFunctionData(functionFragment: "res8", values?: undefined): string;
  encodeFunctionData(functionFragment: "resb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sub_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sub_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sub_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sub_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sub_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sub_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_euint32_euint128",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_euint32_euint256",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_euint32_uint32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_euint64_euint4",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_euint64_euint8",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xor_uint32_euint32",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "and_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "div_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eq_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ge_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gt_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint32_euint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "le_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint32_euint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lt_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint32_euint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint32_euint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mul_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ne_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "or_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rem_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "res128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sub_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sub_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sub_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sub_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sub_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sub_uint32_euint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_euint32_euint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_euint32_euint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_euint32_uint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_euint64_euint4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_euint64_euint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xor_uint32_euint32",
    data: BytesLike
  ): Result;
}

export interface TFHETestSuite6 extends BaseContract {
  connect(runner?: ContractRunner | null): TFHETestSuite6;
  waitForDeployment(): Promise<this>;

  interface: TFHETestSuite6Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  add_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  add_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  add_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  add_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  add_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  and_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  div_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  eq_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ge_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  gt_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint32_euint64: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  le_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint32_euint64: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lt_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint32_euint64: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  max_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint32_euint64: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  min_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  mul_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  ne_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  or_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  rem_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  res128: TypedContractMethod<[], [bigint], "view">;

  res16: TypedContractMethod<[], [bigint], "view">;

  res256: TypedContractMethod<[], [bigint], "view">;

  res32: TypedContractMethod<[], [bigint], "view">;

  res4: TypedContractMethod<[], [bigint], "view">;

  res64: TypedContractMethod<[], [bigint], "view">;

  res8: TypedContractMethod<[], [bigint], "view">;

  resb: TypedContractMethod<[], [bigint], "view">;

  sub_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  sub_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  sub_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  sub_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  sub_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  sub_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_euint32_euint128: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_euint32_euint256: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_euint32_uint32: TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_euint64_euint4: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_euint64_euint8: TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  xor_uint32_euint32: TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "div_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eq_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ge_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gt_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint32_euint64"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "le_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint32_euint64"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lt_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint32_euint64"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "max_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint32_euint64"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "min_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mul_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ne_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "or_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rem_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "res128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res16"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res32"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res4"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "res8"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resb"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sub_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sub_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sub_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sub_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sub_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sub_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_euint32_euint128"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_euint32_euint256"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_euint32_uint32"
  ): TypedContractMethod<
    [a: BytesLike, b: BigNumberish, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_euint64_euint4"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_euint64_euint8"
  ): TypedContractMethod<
    [a: BytesLike, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xor_uint32_euint32"
  ): TypedContractMethod<
    [a: BigNumberish, b: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
