/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SubContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fail"
      | "fail2"
      | "failSucceed"
      | "invalidFail"
      | "oogFail"
      | "succeed"
      | "succeed2"
      | "succeedFail"
      | "succeedSelfDestruct"
      | "succeedStop"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fail", values?: undefined): string;
  encodeFunctionData(functionFragment: "fail2", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "failSucceed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidFail",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oogFail", values?: undefined): string;
  encodeFunctionData(functionFragment: "succeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "succeed2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "succeedFail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "succeedSelfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "succeedStop",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fail2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failSucceed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oogFail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "succeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "succeed2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "succeedFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "succeedSelfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "succeedStop",
    data: BytesLike
  ): Result;
}

export interface SubContract extends BaseContract {
  connect(runner?: ContractRunner | null): SubContract;
  waitForDeployment(): Promise<this>;

  interface: SubContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fail: TypedContractMethod<[], [void], "nonpayable">;

  fail2: TypedContractMethod<[input: BigNumberish], [void], "nonpayable">;

  failSucceed: TypedContractMethod<[], [void], "nonpayable">;

  invalidFail: TypedContractMethod<[], [void], "nonpayable">;

  oogFail: TypedContractMethod<[], [void], "nonpayable">;

  succeed: TypedContractMethod<[], [void], "nonpayable">;

  succeed2: TypedContractMethod<[], [void], "nonpayable">;

  succeedFail: TypedContractMethod<[], [void], "nonpayable">;

  succeedSelfDestruct: TypedContractMethod<[], [void], "nonpayable">;

  succeedStop: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fail"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fail2"
  ): TypedContractMethod<[input: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "failSucceed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "invalidFail"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "oogFail"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "succeed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "succeed2"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "succeedFail"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "succeedSelfDestruct"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "succeedStop"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
