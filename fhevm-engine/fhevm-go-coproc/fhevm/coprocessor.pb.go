// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: coprocessor.proto

package fhevm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCiphertextBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handles [][]byte `protobuf:"bytes,1,rep,name=handles,proto3" json:"handles,omitempty"`
}

func (x *GetCiphertextBatch) Reset() {
	*x = GetCiphertextBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiphertextBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiphertextBatch) ProtoMessage() {}

func (x *GetCiphertextBatch) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiphertextBatch.ProtoReflect.Descriptor instead.
func (*GetCiphertextBatch) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{0}
}

func (x *GetCiphertextBatch) GetHandles() [][]byte {
	if x != nil {
		return x.Handles
	}
	return nil
}

type GetCiphertextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*GetCiphertextSingleResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *GetCiphertextResponse) Reset() {
	*x = GetCiphertextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiphertextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiphertextResponse) ProtoMessage() {}

func (x *GetCiphertextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiphertextResponse.ProtoReflect.Descriptor instead.
func (*GetCiphertextResponse) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{1}
}

func (x *GetCiphertextResponse) GetResponses() []*GetCiphertextSingleResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetCiphertextSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle     []byte             `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Ciphertext *FetchedCiphertext `protobuf:"bytes,2,opt,name=ciphertext,proto3,oneof" json:"ciphertext,omitempty"`
}

func (x *GetCiphertextSingleResponse) Reset() {
	*x = GetCiphertextSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiphertextSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiphertextSingleResponse) ProtoMessage() {}

func (x *GetCiphertextSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiphertextSingleResponse.ProtoReflect.Descriptor instead.
func (*GetCiphertextSingleResponse) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{2}
}

func (x *GetCiphertextSingleResponse) GetHandle() []byte {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *GetCiphertextSingleResponse) GetCiphertext() *FetchedCiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type FetchedCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiphertextBytes   []byte `protobuf:"bytes,1,opt,name=ciphertext_bytes,json=ciphertextBytes,proto3" json:"ciphertext_bytes,omitempty"`
	CiphertextVersion int32  `protobuf:"varint,2,opt,name=ciphertext_version,json=ciphertextVersion,proto3" json:"ciphertext_version,omitempty"`
	CiphertextType    int32  `protobuf:"varint,3,opt,name=ciphertext_type,json=ciphertextType,proto3" json:"ciphertext_type,omitempty"`
}

func (x *FetchedCiphertext) Reset() {
	*x = FetchedCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchedCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchedCiphertext) ProtoMessage() {}

func (x *FetchedCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchedCiphertext.ProtoReflect.Descriptor instead.
func (*FetchedCiphertext) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{3}
}

func (x *FetchedCiphertext) GetCiphertextBytes() []byte {
	if x != nil {
		return x.CiphertextBytes
	}
	return nil
}

func (x *FetchedCiphertext) GetCiphertextVersion() int32 {
	if x != nil {
		return x.CiphertextVersion
	}
	return 0
}

func (x *FetchedCiphertext) GetCiphertextType() int32 {
	if x != nil {
		return x.CiphertextType
	}
	return 0
}

type TrivialEncryptBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*TrivialEncryptRequestSingle `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TrivialEncryptBatch) Reset() {
	*x = TrivialEncryptBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrivialEncryptBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrivialEncryptBatch) ProtoMessage() {}

func (x *TrivialEncryptBatch) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrivialEncryptBatch.ProtoReflect.Descriptor instead.
func (*TrivialEncryptBatch) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{4}
}

func (x *TrivialEncryptBatch) GetValues() []*TrivialEncryptRequestSingle {
	if x != nil {
		return x.Values
	}
	return nil
}

type TrivialEncryptRequestSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle     []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	BeValue    []byte `protobuf:"bytes,2,opt,name=be_value,json=beValue,proto3" json:"be_value,omitempty"`
	OutputType int32  `protobuf:"varint,3,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
}

func (x *TrivialEncryptRequestSingle) Reset() {
	*x = TrivialEncryptRequestSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrivialEncryptRequestSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrivialEncryptRequestSingle) ProtoMessage() {}

func (x *TrivialEncryptRequestSingle) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrivialEncryptRequestSingle.ProtoReflect.Descriptor instead.
func (*TrivialEncryptRequestSingle) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{5}
}

func (x *TrivialEncryptRequestSingle) GetHandle() []byte {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *TrivialEncryptRequestSingle) GetBeValue() []byte {
	if x != nil {
		return x.BeValue
	}
	return nil
}

func (x *TrivialEncryptRequestSingle) GetOutputType() int32 {
	if x != nil {
		return x.OutputType
	}
	return 0
}

type AsyncComputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation    FheOperation             `protobuf:"varint,1,opt,name=operation,proto3,enum=fhevm.common.FheOperation" json:"operation,omitempty"`
	OutputHandle []byte                   `protobuf:"bytes,3,opt,name=output_handle,json=outputHandle,proto3" json:"output_handle,omitempty"`
	Inputs       []*AsyncComputationInput `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *AsyncComputation) Reset() {
	*x = AsyncComputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncComputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncComputation) ProtoMessage() {}

func (x *AsyncComputation) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncComputation.ProtoReflect.Descriptor instead.
func (*AsyncComputation) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{6}
}

func (x *AsyncComputation) GetOperation() FheOperation {
	if x != nil {
		return x.Operation
	}
	return FheOperation_FHE_ADD
}

func (x *AsyncComputation) GetOutputHandle() []byte {
	if x != nil {
		return x.OutputHandle
	}
	return nil
}

func (x *AsyncComputation) GetInputs() []*AsyncComputationInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type AsyncComputationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//
	//	*AsyncComputationInput_InputHandle
	//	*AsyncComputationInput_Scalar
	Input isAsyncComputationInput_Input `protobuf_oneof:"input"`
}

func (x *AsyncComputationInput) Reset() {
	*x = AsyncComputationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncComputationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncComputationInput) ProtoMessage() {}

func (x *AsyncComputationInput) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncComputationInput.ProtoReflect.Descriptor instead.
func (*AsyncComputationInput) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{7}
}

func (m *AsyncComputationInput) GetInput() isAsyncComputationInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *AsyncComputationInput) GetInputHandle() []byte {
	if x, ok := x.GetInput().(*AsyncComputationInput_InputHandle); ok {
		return x.InputHandle
	}
	return nil
}

func (x *AsyncComputationInput) GetScalar() []byte {
	if x, ok := x.GetInput().(*AsyncComputationInput_Scalar); ok {
		return x.Scalar
	}
	return nil
}

type isAsyncComputationInput_Input interface {
	isAsyncComputationInput_Input()
}

type AsyncComputationInput_InputHandle struct {
	InputHandle []byte `protobuf:"bytes,1,opt,name=input_handle,json=inputHandle,proto3,oneof"`
}

type AsyncComputationInput_Scalar struct {
	Scalar []byte `protobuf:"bytes,2,opt,name=scalar,proto3,oneof"`
}

func (*AsyncComputationInput_InputHandle) isAsyncComputationInput_Input() {}

func (*AsyncComputationInput_Scalar) isAsyncComputationInput_Input() {}

type InputToUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputPayload    []byte `protobuf:"bytes,1,opt,name=input_payload,json=inputPayload,proto3" json:"input_payload,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallerAddress   string `protobuf:"bytes,3,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	Signature       []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *InputToUpload) Reset() {
	*x = InputToUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputToUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputToUpload) ProtoMessage() {}

func (x *InputToUpload) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputToUpload.ProtoReflect.Descriptor instead.
func (*InputToUpload) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{8}
}

func (x *InputToUpload) GetInputPayload() []byte {
	if x != nil {
		return x.InputPayload
	}
	return nil
}

func (x *InputToUpload) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *InputToUpload) GetCallerAddress() string {
	if x != nil {
		return x.CallerAddress
	}
	return ""
}

func (x *InputToUpload) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type InputCiphertextResponseHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle         []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	CiphertextType int32  `protobuf:"varint,2,opt,name=ciphertext_type,json=ciphertextType,proto3" json:"ciphertext_type,omitempty"`
}

func (x *InputCiphertextResponseHandle) Reset() {
	*x = InputCiphertextResponseHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCiphertextResponseHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCiphertextResponseHandle) ProtoMessage() {}

func (x *InputCiphertextResponseHandle) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCiphertextResponseHandle.ProtoReflect.Descriptor instead.
func (*InputCiphertextResponseHandle) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{9}
}

func (x *InputCiphertextResponseHandle) GetHandle() []byte {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *InputCiphertextResponseHandle) GetCiphertextType() int32 {
	if x != nil {
		return x.CiphertextType
	}
	return 0
}

type InputCiphertextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputHandles          []*InputCiphertextResponseHandle `protobuf:"bytes,1,rep,name=input_handles,json=inputHandles,proto3" json:"input_handles,omitempty"`
	Eip712ContractAddress string                           `protobuf:"bytes,2,opt,name=eip712ContractAddress,proto3" json:"eip712ContractAddress,omitempty"`
	Eip712CallerAddress   string                           `protobuf:"bytes,3,opt,name=eip712CallerAddress,proto3" json:"eip712CallerAddress,omitempty"`
	Eip712SignerAddress   string                           `protobuf:"bytes,4,opt,name=eip712SignerAddress,proto3" json:"eip712SignerAddress,omitempty"`
	Eip712Signature       []byte                           `protobuf:"bytes,5,opt,name=eip712Signature,proto3" json:"eip712Signature,omitempty"`
}

func (x *InputCiphertextResponse) Reset() {
	*x = InputCiphertextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCiphertextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCiphertextResponse) ProtoMessage() {}

func (x *InputCiphertextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCiphertextResponse.ProtoReflect.Descriptor instead.
func (*InputCiphertextResponse) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{10}
}

func (x *InputCiphertextResponse) GetInputHandles() []*InputCiphertextResponseHandle {
	if x != nil {
		return x.InputHandles
	}
	return nil
}

func (x *InputCiphertextResponse) GetEip712ContractAddress() string {
	if x != nil {
		return x.Eip712ContractAddress
	}
	return ""
}

func (x *InputCiphertextResponse) GetEip712CallerAddress() string {
	if x != nil {
		return x.Eip712CallerAddress
	}
	return ""
}

func (x *InputCiphertextResponse) GetEip712SignerAddress() string {
	if x != nil {
		return x.Eip712SignerAddress
	}
	return ""
}

func (x *InputCiphertextResponse) GetEip712Signature() []byte {
	if x != nil {
		return x.Eip712Signature
	}
	return nil
}

type InputUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadResponses []*InputCiphertextResponse `protobuf:"bytes,1,rep,name=upload_responses,json=uploadResponses,proto3" json:"upload_responses,omitempty"`
}

func (x *InputUploadResponse) Reset() {
	*x = InputUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputUploadResponse) ProtoMessage() {}

func (x *InputUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputUploadResponse.ProtoReflect.Descriptor instead.
func (*InputUploadResponse) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{11}
}

func (x *InputUploadResponse) GetUploadResponses() []*InputCiphertextResponse {
	if x != nil {
		return x.UploadResponses
	}
	return nil
}

// The request message containing the user's name.
type AsyncComputeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computations []*AsyncComputation `protobuf:"bytes,1,rep,name=computations,proto3" json:"computations,omitempty"`
}

func (x *AsyncComputeRequest) Reset() {
	*x = AsyncComputeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncComputeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncComputeRequest) ProtoMessage() {}

func (x *AsyncComputeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncComputeRequest.ProtoReflect.Descriptor instead.
func (*AsyncComputeRequest) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{12}
}

func (x *AsyncComputeRequest) GetComputations() []*AsyncComputation {
	if x != nil {
		return x.Computations
	}
	return nil
}

type InputUploadBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputCiphertexts []*InputToUpload `protobuf:"bytes,1,rep,name=input_ciphertexts,json=inputCiphertexts,proto3" json:"input_ciphertexts,omitempty"`
}

func (x *InputUploadBatch) Reset() {
	*x = InputUploadBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputUploadBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputUploadBatch) ProtoMessage() {}

func (x *InputUploadBatch) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputUploadBatch.ProtoReflect.Descriptor instead.
func (*InputUploadBatch) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{13}
}

func (x *InputUploadBatch) GetInputCiphertexts() []*InputToUpload {
	if x != nil {
		return x.InputCiphertexts
	}
	return nil
}

type WaitBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiphertextHandles []string `protobuf:"bytes,1,rep,name=ciphertext_handles,json=ciphertextHandles,proto3" json:"ciphertext_handles,omitempty"`
}

func (x *WaitBatch) Reset() {
	*x = WaitBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitBatch) ProtoMessage() {}

func (x *WaitBatch) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitBatch.ProtoReflect.Descriptor instead.
func (*WaitBatch) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{14}
}

func (x *WaitBatch) GetCiphertextHandles() []string {
	if x != nil {
		return x.CiphertextHandles
	}
	return nil
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode int32 `protobuf:"varint,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{15}
}

func (x *GenericResponse) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

type FhevmResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiphertextHandles []string `protobuf:"bytes,1,rep,name=ciphertext_handles,json=ciphertextHandles,proto3" json:"ciphertext_handles,omitempty"`
}

func (x *FhevmResponses) Reset() {
	*x = FhevmResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coprocessor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FhevmResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FhevmResponses) ProtoMessage() {}

func (x *FhevmResponses) ProtoReflect() protoreflect.Message {
	mi := &file_coprocessor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FhevmResponses.ProtoReflect.Descriptor instead.
func (*FhevmResponses) Descriptor() ([]byte, []int) {
	return file_coprocessor_proto_rawDescGZIP(), []int{16}
}

func (x *FhevmResponses) GetCiphertextHandles() []string {
	if x != nil {
		return x.CiphertextHandles
	}
	return nil
}

var File_coprocessor_proto protoreflect.FileDescriptor

var file_coprocessor_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e,
	0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x96, 0x01,
	0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x15, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0xa4, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x68,
	0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x65,
	0x69, 0x70, 0x37, 0x31, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x69, 0x70, 0x37,
	0x31, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x65, 0x69, 0x70, 0x37, 0x31, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x6c, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a,
	0x13, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x68, 0x65,
	0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a,
	0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4d, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x22, 0x3a, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x3f, 0x0a, 0x0e, 0x46, 0x68, 0x65, 0x76, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x32, 0x80, 0x04, 0x0a, 0x10, 0x46, 0x68, 0x65, 0x76, 0x6d, 0x43, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x0c, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x66, 0x68, 0x65, 0x76,
	0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x57, 0x61, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x68,
	0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x68, 0x65, 0x76, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d,
	0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x26, 0x2e,
	0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x66, 0x68, 0x65, 0x76,
	0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x1a, 0x28, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19,
	0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x68, 0x65, 0x76,
	0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x22, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x37, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x68, 0x65, 0x76, 0x6d, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x42, 0x10, 0x46, 0x68, 0x65, 0x76, 0x6d, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x66, 0x68, 0x65, 0x76, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coprocessor_proto_rawDescOnce sync.Once
	file_coprocessor_proto_rawDescData = file_coprocessor_proto_rawDesc
)

func file_coprocessor_proto_rawDescGZIP() []byte {
	file_coprocessor_proto_rawDescOnce.Do(func() {
		file_coprocessor_proto_rawDescData = protoimpl.X.CompressGZIP(file_coprocessor_proto_rawDescData)
	})
	return file_coprocessor_proto_rawDescData
}

var file_coprocessor_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_coprocessor_proto_goTypes = []any{
	(*GetCiphertextBatch)(nil),            // 0: fhevm.coprocessor.GetCiphertextBatch
	(*GetCiphertextResponse)(nil),         // 1: fhevm.coprocessor.GetCiphertextResponse
	(*GetCiphertextSingleResponse)(nil),   // 2: fhevm.coprocessor.GetCiphertextSingleResponse
	(*FetchedCiphertext)(nil),             // 3: fhevm.coprocessor.FetchedCiphertext
	(*TrivialEncryptBatch)(nil),           // 4: fhevm.coprocessor.TrivialEncryptBatch
	(*TrivialEncryptRequestSingle)(nil),   // 5: fhevm.coprocessor.TrivialEncryptRequestSingle
	(*AsyncComputation)(nil),              // 6: fhevm.coprocessor.AsyncComputation
	(*AsyncComputationInput)(nil),         // 7: fhevm.coprocessor.AsyncComputationInput
	(*InputToUpload)(nil),                 // 8: fhevm.coprocessor.InputToUpload
	(*InputCiphertextResponseHandle)(nil), // 9: fhevm.coprocessor.InputCiphertextResponseHandle
	(*InputCiphertextResponse)(nil),       // 10: fhevm.coprocessor.InputCiphertextResponse
	(*InputUploadResponse)(nil),           // 11: fhevm.coprocessor.InputUploadResponse
	(*AsyncComputeRequest)(nil),           // 12: fhevm.coprocessor.AsyncComputeRequest
	(*InputUploadBatch)(nil),              // 13: fhevm.coprocessor.InputUploadBatch
	(*WaitBatch)(nil),                     // 14: fhevm.coprocessor.WaitBatch
	(*GenericResponse)(nil),               // 15: fhevm.coprocessor.GenericResponse
	(*FhevmResponses)(nil),                // 16: fhevm.coprocessor.FhevmResponses
	(FheOperation)(0),                     // 17: fhevm.common.FheOperation
}
var file_coprocessor_proto_depIdxs = []int32{
	2,  // 0: fhevm.coprocessor.GetCiphertextResponse.responses:type_name -> fhevm.coprocessor.GetCiphertextSingleResponse
	3,  // 1: fhevm.coprocessor.GetCiphertextSingleResponse.ciphertext:type_name -> fhevm.coprocessor.FetchedCiphertext
	5,  // 2: fhevm.coprocessor.TrivialEncryptBatch.values:type_name -> fhevm.coprocessor.TrivialEncryptRequestSingle
	17, // 3: fhevm.coprocessor.AsyncComputation.operation:type_name -> fhevm.common.FheOperation
	7,  // 4: fhevm.coprocessor.AsyncComputation.inputs:type_name -> fhevm.coprocessor.AsyncComputationInput
	9,  // 5: fhevm.coprocessor.InputCiphertextResponse.input_handles:type_name -> fhevm.coprocessor.InputCiphertextResponseHandle
	10, // 6: fhevm.coprocessor.InputUploadResponse.upload_responses:type_name -> fhevm.coprocessor.InputCiphertextResponse
	6,  // 7: fhevm.coprocessor.AsyncComputeRequest.computations:type_name -> fhevm.coprocessor.AsyncComputation
	8,  // 8: fhevm.coprocessor.InputUploadBatch.input_ciphertexts:type_name -> fhevm.coprocessor.InputToUpload
	12, // 9: fhevm.coprocessor.FhevmCoprocessor.AsyncCompute:input_type -> fhevm.coprocessor.AsyncComputeRequest
	12, // 10: fhevm.coprocessor.FhevmCoprocessor.WaitComputations:input_type -> fhevm.coprocessor.AsyncComputeRequest
	13, // 11: fhevm.coprocessor.FhevmCoprocessor.UploadInputs:input_type -> fhevm.coprocessor.InputUploadBatch
	0,  // 12: fhevm.coprocessor.FhevmCoprocessor.GetCiphertexts:input_type -> fhevm.coprocessor.GetCiphertextBatch
	4,  // 13: fhevm.coprocessor.FhevmCoprocessor.TrivialEncryptCiphertexts:input_type -> fhevm.coprocessor.TrivialEncryptBatch
	15, // 14: fhevm.coprocessor.FhevmCoprocessor.AsyncCompute:output_type -> fhevm.coprocessor.GenericResponse
	16, // 15: fhevm.coprocessor.FhevmCoprocessor.WaitComputations:output_type -> fhevm.coprocessor.FhevmResponses
	11, // 16: fhevm.coprocessor.FhevmCoprocessor.UploadInputs:output_type -> fhevm.coprocessor.InputUploadResponse
	1,  // 17: fhevm.coprocessor.FhevmCoprocessor.GetCiphertexts:output_type -> fhevm.coprocessor.GetCiphertextResponse
	15, // 18: fhevm.coprocessor.FhevmCoprocessor.TrivialEncryptCiphertexts:output_type -> fhevm.coprocessor.GenericResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_coprocessor_proto_init() }
func file_coprocessor_proto_init() {
	if File_coprocessor_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coprocessor_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetCiphertextBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetCiphertextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetCiphertextSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FetchedCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TrivialEncryptBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TrivialEncryptRequestSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AsyncComputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AsyncComputationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*InputToUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*InputCiphertextResponseHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*InputCiphertextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*InputUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AsyncComputeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*InputUploadBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*WaitBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coprocessor_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FhevmResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coprocessor_proto_msgTypes[2].OneofWrappers = []any{}
	file_coprocessor_proto_msgTypes[7].OneofWrappers = []any{
		(*AsyncComputationInput_InputHandle)(nil),
		(*AsyncComputationInput_Scalar)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coprocessor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coprocessor_proto_goTypes,
		DependencyIndexes: file_coprocessor_proto_depIdxs,
		MessageInfos:      file_coprocessor_proto_msgTypes,
	}.Build()
	File_coprocessor_proto = out.File
	file_coprocessor_proto_rawDesc = nil
	file_coprocessor_proto_goTypes = nil
	file_coprocessor_proto_depIdxs = nil
}
